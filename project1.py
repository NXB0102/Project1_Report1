import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

class DataFrame:
    def __init__(self):
        self.df_gpl = pd.read_csv("GPL570-55999.txt", sep='\t', comment="#", low_memory=False)
        self.df_gse = pd.read_csv("GSE48278_series_matrix.txt", sep='\t', comment="!")
        self.gsm_post_pre_list = self.__get_same_title_per_sample_geo_accession(gse_file="GSE48278_series_matrix.txt")

    def generate_gene_analysis_csv(self, csv_name: str, filter_gene_symbol_list: list[str] = []) -> pd.DataFrame:
        '''
            This function will combine "Gene Symbol" from self.df_gpl to self.df_gse,
            then a output CSV file will be generated by new dataframe.
            Parameter:
                - csv_name: The name of output file
                - filter_gene_symbol_list: Gene symbol filter list
            Generate:
                - A output csv file
            Return:
                - A merged dataframe
        '''
        df = pd.merge(self.df_gpl[["ID", "Gene Symbol"]], self.df_gse, left_on="ID", right_on="ID_REF", how="inner")
        if len(filter_gene_symbol_list) > 0:
            df = df[df['Gene Symbol'].isin(filter_gene_symbol_list)]

        df = df.drop(columns=["ID_REF"])

        df.to_csv(csv_name)
        return df

    def __get_same_title_per_sample_geo_accession(self, gse_file: str):
        same_titles = None
        sample_geo_accessions = None

        with open(gse_file, 'r', encoding='utf-8') as f:
            for line in f:
                if line.startswith('!Sample_title'):
                    same_titles = line.strip().split('\t')[1:]
                    same_titles = [title.strip('"') for title in same_titles]
                elif line.startswith('!Sample_geo_accession'):
                    sample_geo_accessions = line.strip().split('\t')[1:]
                    sample_geo_accessions = [geo_accession.strip('"') for geo_accession in sample_geo_accessions]
        
                if same_titles != None and sample_geo_accessions != None:
                    break

        if len(same_titles) != len(sample_geo_accessions):
            return None
        
        post_pre_list = []
        for i in range(0, len(sample_geo_accessions), 2):
            split_title = same_titles[i].split('_')

            post_pre_list.append({
                'post': sample_geo_accessions[i],
                'pre': sample_geo_accessions[i + 1],
                'subject': split_title[0],
                'group': split_title[1],
                'log2fc': f"Log2FC_{sample_geo_accessions[i]}_{sample_geo_accessions[i + 1]}"
            })

        return post_pre_list
        
    def generate_gsm_post_pre_group_csv(self, csv_name: str) -> pd.DataFrame:
        df = pd.DataFrame(self.gsm_post_pre_list)
        df.to_csv(csv_name)
        return df

def generate_gsm_log2_post_pre(df_gene: pd.DataFrame, df_gsm_post_pre_group: pd.DataFrame, csv_name: str) -> pd.DataFrame:
    '''
        This function calculate log2fc of post and pre
        Parameter:
            - df_gene: The dataframe that contains raw measurements (value is formatted by the generate_gene_analysis_csv function)
            - df_gsm_post_pre_group: The dataframe that contains GSM post pre list (value is formatted by the generate_gsm_post_pre_group_csv function)
            - csv_name: The name of output file
        Generate:
            - A output csv file
        Return:
            - A log2 post pre dataframe with column names are gens
    '''
    log2fc_results = pd.DataFrame()
    log2fc_results["Gene Symbol"] = df_gene["Gene Symbol"]

    for _, post_pre_gsm in df_gsm_post_pre_group.iterrows():
        post = post_pre_gsm['post']
        pre = post_pre_gsm['pre']
        log2fc = post_pre_gsm['log2fc']
        log2fc_results[log2fc] = np.log2(df_gene[post] + 1) - np.log2(df_gene[pre] + 1)

    log2fc_results = log2fc_results.set_index('Gene Symbol').T
    log2fc_results = log2fc_results.reset_index()
    log2fc_results = log2fc_results.rename(columns={'index': 'log2fc'})
    
    log2fc_results.to_csv(csv_name)
    return log2fc_results

def bar_chart(df: pd.DataFrame, filter_gene: list[str]) -> None:
    for gene in filter_gene:
        plt.figure(figsize=(8, 5))
        
        # Average value each gene
        df.groupby('group')[gene].mean().plot(kind='bar', color='skyblue')
        
        plt.title(f'Average Log2FC of {gene} per Group')
        plt.ylabel('Log2FC')
        plt.xlabel('Group')
        plt.axhline(0, color='gray', linestyle='--')
        plt.tight_layout()
        plt.show()

def effective_group(df: pd.DataFrame, filter_gene: list[str]) -> None:
    group_a = df[df['group'] == 'A'][filter_gene].mean().mean()
    group_b = df[df['group'] == 'B'][filter_gene].mean().mean()
    group_c = df[df['group'] == 'C'][filter_gene].mean().mean()
    group_d = df[df['group'] == 'D'][filter_gene].mean().mean()
    group_e = df[df['group'] == 'E'][filter_gene].mean().mean()
    group_f = df[df['group'] == 'F'][filter_gene].mean().mean()

    print("Group A mean:", group_a)
    print("Group B mean:", group_b)
    print("Group C mean:", group_c)
    print("Group D mean:", group_d)
    print("Group E mean:", group_e)
    print("Group F mean:", group_f)

def main():
    filter_gene_symbol = [
        'MYOD1', 'MYOG', 'IGF1', 'AKT1', 'MTOR', 'FST', 'MSTN'      # Muscle growth genes
    ]

    operator = DataFrame()

    df_gene_analysis = operator.generate_gene_analysis_csv(csv_name="gene_analysis.csv", filter_gene_symbol_list=filter_gene_symbol)
    df_gsm_post_pre_group = operator.generate_gsm_post_pre_group_csv(csv_name="gsm_post_pre_group.csv")

    df_log2fc = generate_gsm_log2_post_pre(df_gene=df_gene_analysis, df_gsm_post_pre_group=df_gsm_post_pre_group, csv_name="gsm_log2_post_pre.csv")

    df_final = pd.merge(df_gsm_post_pre_group, df_log2fc, on="log2fc", how="inner")
    df_final.to_csv('final_results.csv')

    bar_chart(df_final, filter_gene_symbol)
    effective_group(df_final, filter_gene_symbol)
    
if __name__ == "__main__":
    main()